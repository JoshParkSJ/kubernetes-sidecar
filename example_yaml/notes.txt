Every yaml configuration file has 3 parts

1. metadata (i.e name, labels)
2. specification (specific to kind of configuation)
3. status (no need to specify; automatically generated by kubernetes)
    - if current status != spec, regenerate
    - gets status data from etcd (stores states of containers) which is in the control plane

------------

# set up a test kubernetes environment
minikube start
- start minikube
kubectl get pod -A
- check out your shiny new cluster

# try out a pod deployment
kubectl create -f pod.yaml
- create a pod using pod.yaml script
kubectl exec -it sidecar-container-demo -c main-container -- /bin/sh
- start a executable into pod "sidecar-container-demo" and name "main-container"
apt-get update && apt-get install -y curl
- install apt-get for the shell session and curl
curl localhost
- query localhost and see the response  

# full scale deployment with service object and node port so the outside world can access my pod
kubectl create -f manifest.yml
- create a deployment

kubectl get deploy -o wide
kubectl get node -o wide    
kubectl get pod -o wide
kubectl get svc -o wide
- list the deployment, pods, and service
- notice the selector is nginx-webapp (first command)
- you can see 5 pods running in 5 different ip addresses (second command)
- service port can be found from the last command (i.e nginx-webapp NodePort ... PORT(S) 80:32123/TCP) -> 32123 is the service port

minikube service nginx-webapp --url
- creates a tunnel to the cluster and gives you a clickable url to one of your 5 pods

kubectl cluster-info
- to actually access this deployment from the browser, get the kubernetes master (not coreDNS) IP address (i.e 192.168.64.2)
- service object maps the port 32123 to the port 80
- access service object in http://192.168.64.2:32123
- access pod deploybement in one of the 5 ip addresses

# same query can be done to view the responses for these 5 pods
kubectl exec -it nginx-webapp-6d7b787bd5-ttv4t -c main-container -- /bin/sh
# apt-get update && apt-get install -y curl
# curl localhost

# destroy pod
kubectl delete pod sidecar-container-demo